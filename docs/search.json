[
  {
    "objectID": "hysplit.html",
    "href": "hysplit.html",
    "title": "How to Run HYSPLIT Simulations and Calculate Affected Population with R",
    "section": "",
    "text": "A HYSPLIT Concentration-Dispersion model simulates the transport of “particles” as the wind blows them. HYSPLIT simulations can be run online or with a free program that can be downloaded to a local computer. As researchers may want to model the dispersion of pollutants released over time and calculate the number of people affected, this tutorial describes how to use R to batch run HYSPLIT in a Windows-based computer and merge it with census data.\nI want to thank Dr. Mark Cohen from NOAA ARL, who helped configure the parameters in HYPSLIT and Jason Tan who figured out how to HYSPLIT in R.\n\n1. The Program\nUsers can download the Windows-based version of HYSPLIT here.\nOnce you have downloaded and installed the program, you will see a new C:/hysplit/ folder.\n\n\n2. Gridded Meteorological Data\nHYSPLIT uses existing meteorological data, including wind speed, direction, and other 3D meteorological data, to model particle dispersion. To run HYSPLIT, users must download Gridded Meteorological Data from specific areas and periods that the user would like to simulate their dispersion model. A list of Gridded Meteorological Data can be found here.\nFor the United States, I was recommended to use meteorological data from WRF ARW which provides meteorological data for every 27 kilometers, from 1980 to the present date.\nLet’s assume that I would like to simulate the dispersion of 100 NO2 particles released on May 1, 2004, for 24 hours. In this case, I would need WRF ARW meteorological data, wrfout_d01_20040501.ARL, from this site.\nI saved the downloaded meteorological data in a new folder C:/hysplit/met/, which is used to store all meteorological data from HYSPLIT.\n\n\n3. The CONTROL File\nA CONTROL file is a text file (with no extension) that specifies each simulation’s details. You can download a sample CONTROL file here.\nThe table below shows a clarification from Dr. Mark Cohen, which explains each line in the CONTROL file. Once you have created a control file, you need to save it as CONTROL in the C:/hysplit/working/ folder. I also created a new folder, C:/hysplit/working/output/, to store all outputs.\n\n\n\nCONTROL file entry\nDefinition\nNotes\n\n\n\n\n04 05 01 00 00\nStart date and time for simulation (YR MO DA HR MN)\nAll times in HYSPLIT are Universal Coordinated Time (UTC)\nMinutes are optional\nEach entry must be two digits\n\n\n1\nNumber of starting locations\n\n\n\n39.7372 -75.5033 100.0\nStarting location (LAT LON HEIGHT)\nHeight is in meters above ground level\nWest longitudes are negative\nIf there is more than one starting location or height, each must be on a separate line\n\n\n24\nDuration of run\nIn hours\n\n\n0\nVertical motion option\n0 = defaults to the meteorological data\n\n\n10000.0\nTop of the model domain (in meters)\nGenerally use 10000 or 25000\n\n\n1\nNumber of meteorological data files\n\n\n\nC:/hysplit/met/\nDirectory of 1st meteorological file\nIf there is more than 1 file being used, then these two lines will be repeated for each file\n\n\nwrfout_d01_20040501.ARL\nName of the 1st meteorological file\n\n\n\n1\nNumber of different pollutants\n\n\n\nNO2\nPollutant 4-character identification name\n\n\n\n1.0\nEmissions rate (per hour)\n\n\n\n24\nHours of emissions\n\n\n\n00 00 00 00 00\nRelease start time\nWith all zeros, the beginning of the run is the default\n\n\n1\nNumber of simultaneous concentration grids\n\n\n\n0.0 0.0\nCenter of concentration grids\nWith all zeros, the source location is the default\n\n\n0.1 0.1\nGrid spacing (in degrees lat-lon)\n\n\n\n20.0 20.0\nGrid span (in degrees lat-lon)\n\n\n\nC:/hysplit/output/\nDirectory for the concentration grid output file\n\n\n\ncdump\nName of concentration grid output file\n\n\n\n1\nNumber of vertical levels\n\n\n\n100\nHeight of each vertical level (in meters above ground level)\nThis means that I am collecting concentration data for a layer 0-100 m. above the ground\n\n\n00 00 00 00 00\nSampling start time\nAll zeros default to beginning of the run\n\n\n00 00 00 00 00\nSampling end time\nAll zeros default to end of the run\n\n\n00 24 00\nSampling interval (type hour minute)\n00 = average\n24 = 24 hours\n00 = 0 minutes\n\n\n1\nNumber of pollutants depositing\n\n\n\n0.0 0.0 0.0\nParticle diameter, density, and shape\n\n\n\n0.0 46.0 0.1 1.6 0.01\nDeposition velocity (m/s), Pollutant molecular weight (g/mol), Surface reactivity ratio, Diffusivity Ratio, Effective Henry’s Constant\nRefer to information from this site\n\n\n0.1 0.0 0.0\nWet removal: Actual Henry’s Constant,\nIn-cloud (GT1=1L/L; LT 1=1/s), Below cloud (1/s)\nRefer to information from this site\n\n\n0.0\nRadioactive decay half-life (days)\nRefer to information from this site\n\n\n0.0\nPollutant Resuspension (1/m)\nRefer to information from this site\n\n\n\n\n\n4. Running a Simulation\nAfter setting up a CONTROL file, users are ready to run a HYSPLIT simulation. The script below runs a HYSPLIT simulation based on the CONTROL file and converts the output into an ASCII text file. Note that the output text file format will be cdump_DAYOFYEAR_TIME at the start of the run. For example, a simulation that starts at midnight on May 1 would be cdump_123_00.\nsetwd(\"C:/hysplit/working\")\nsystem2(\"..\\\\exec\\\\hycs_std\")\nsystem2(\"..\\\\exec\\\\con2asc\", args=\"C:/hysplit/output/cdump\") \n\n\n5. Using Loops to Batch Run HYSPLIT\nThe point of running HYPSLIT in R is because you would like to run HYSPLIT simulations for multiple locations, dates, and times. First, the user must download meteorological files for all the dates planned. After that, you can batch run all the simulations. Below is an example R code that I use to run HYSPLIT simulations every day in May, July, and August of 2004. Note that if you are running simulations for multiple locations on the same day, you must change the ASCII file’s name to be unique for each location.\nlibrary(\"tidyverse\")\nlibrary(\"readr\")\n\nyear&lt;-2004 #set year\nmlist&lt;-c(5,7,8) #set month\ndlist&lt;-seq(from=1, to=31, by=1) #set dates\n\nfor (month in mlist) {\n  for (day in dlist) {\n    \n    #read existing file\n    setwd(\"C:/hysplit/working\")\n    concbase&lt;-read_file(\"CONTROL_NO2\")\n    \n    #specify meteorological file\n    metfile&lt;-paste0(\"wrfout_d01_\", \n                      as.character(year), \n                      str_pad(as.character(month),pad=\"0\",side=\"left\",width=2),\n                      str_pad(as.character(day),pad=\"0\",side=\"left\",width=2),\n                      \".ARL\")\n    \n    #specify date\n    startdate&lt;-paste(substr(as.character(year),3,4),\n                       str_pad(as.character(month),pad=\"0\",side=\"left\",width=2),\n                       str_pad(as.character(day),pad=\"0\",side=\"left\",width=2),\n                       \"00\")\n    \n    #replace parameters from the original file\n    conc&lt;-concbase %&gt;% \n        str_replace(\"wrfout_d01_20040501.ARL\", metfile) %&gt;%\n        str_replace(\"04 05 01 00\", startdate) %&gt;%\n        str_replace(\"C:/hysplit/serc/\", paste0(\"C:/\", group, \"/output/\"))\n    \n    #write control file, run simulation, and convert to ascii  \n    write_file(conc,\"CONTROL\")\n    system2(\"..\\\\exec\\\\hycs_std\")\n    system2(\"..\\\\exec\\\\con2asc\", args=\"C:/hysplit/output/cdump\") #args is the input file\n  }\n}\n\n#change filename to location1_DAYOFYEAR_TIME\nloc&lt;-\"location1\"\nsetwd(\"C:/hysplit/output/\")\noldfiles&lt;-list.files(pattern=\"cdump_\")\nnewfiles&lt;-str_replace(oldfiles, \"cdump\", loc)\nfile.copy(from=oldfiles, to=newfiles)\nfile.remove(oldfiles)\nfile.remove(\"cdump\")\n\n\n6. Interpreting the Output\nThe output file from a single simulation should look like the one shown below. The column NO2 indicates the NO2 concentration in particles per grid. As our grid spacing is 0.1 latitude (~111 meters) and 0.1 longitude (~111 meters) with a model domain height of 10,000 meters, the NO2 column represents the number of NO2 particles per 123,210,000 cubic meters.\n\n\n\nX\nDAY\nHR\nLAT\nLON\nNO2\nX00100\nfile\n\n\n\n\n1\n123\n0\n39.75\n-75.75\n0\nNA\n10030_123_00\n\n\n2\n123\n0\n39.85\n-75.75\n0\nNA\n10030_123_00\n\n\n3\n123\n0\n39.95\n-75.75\n0\nNA\n10030_123_00\n\n\n\n\n\n7. Calculating Affected Population\nIn this example, we will calculated the number of affected people based on a single HYSPLIT simulation from the CONTROL file in part 3.\nFirst, we need to find the number of particles per grid after all the particles were released. The total number of particles is easier to work with than concentrations because the number of particles can be added when working with multiple simulations affecting a single area.\naream3&lt;-111*111*10000 #111 m x 111 m x 10000 meters\ndf2&lt;-df %&gt;% mutate(part=NO2*aream3) %&gt;%\n  group_by(LAT,LON) %&gt;% \n  summarize(part=sum(part))\nIn the next step, we convert the total number of particles data into a raster, and then to a polygon shapefile. Note that this is only one way to combine HYPSLIT and demographic data, and there are other ways to combine the two data sets. However, attention must be paid to the units in each step.\nThe polygon shapefile is shown below.\nlibrary(\"tidycensus\")\nlibrary(\"rgdal\")\nlibrary(\"spdplyr\")\nlibrary(\"tmap\")\nlibrary(\"raster\")\n\nminx&lt;-min(df2$LON)#|\nmaxx&lt;-max(df2$LON)\nminy&lt;-min(df2$LAT)\nmaxy&lt;-max(df2$LAT)\nLON&lt;-seq(from=minx, to=maxx, by=0.1)\nLAT&lt;-seq(from=miny, to=maxy, by=0.1)\ngrid&lt;-tidyr::crossing(LON,LAT)\n  \nhygrid&lt;-merge(df2, grid, by=c(\"LAT\",\"LON\"), all=TRUE) %&gt;%\n  dplyr::select(LAT,LON,part) %&gt;%\n  mutate(part=ifelse(is.na(part),0,part))\n  \ncoordinates(hygrid)=~LON+LAT\nproj4string(hygrid)=CRS(\"+proj=longlat +datum=NAD83\")\ngridded(hygrid) = TRUE\nr = raster(hygrid)\n\np&lt;-rasterToPolygons(r, na.rm=TRUE, dissolve=FALSE)\n\np2&lt;-p %&gt;%\n  filter(part&gt;0)\n\n#tm_shape(p2)+tm_fill(\"part\", breaks=c(0,0.000001,0.00001, 0.0001,1))\n\n\n\n\n\nIn the next step, we will combine HYPSLIT concentration data with block group data from the state of Delaware. First, we have to calculate the area of each HYSPLIT grid polygon, block group, and the area that each HYSPLIT grid and block group intersects.\np3 &lt;- spTransform(p2, CRS(\"+init=epsg:4326\"))\n\np3$hysplitgridarea&lt;-area(p3)\n\nlibrary(\"tigris\")\nde_blck&lt;-tigris::block_groups(state=\"DE\", class=\"sp\")\n\nde_blck2&lt;-spTransform(de_blck, CRS(\"+init=epsg:4326\"))\n\nde_blck2$blckarea&lt;-area(de_blck2)\n\nint&lt;-intersect(p3, de_blck2)\n\nint$area&lt;-area(int)\n\nintdf&lt;-int@data\nIn the next step, we calculate the number of person × particles within each area 𝑖 that a HYSPLIT grid ℎ and a block group 𝑏 intersects each other. The number of person × particles exposed can be calculated using the formula below.\n\\(PersonParticles_i = \\dfrac{Area_i}{Area_h} \\times Particles_h \\times \\dfrac{Area_i}{Area_b} \\times Total_b\\)\nwhere \\(\\dfrac{Area_i}{Area_h}\\) represents the number of particles in HYSPLIT grid \\(ℎ\\) falls into the intersecting area \\(𝑖\\). \\(\\dfrac{Area_i}{Area_b}\\) represents the number of people in block grid \\(𝑏\\) that is exposed to the particles in area \\(𝑖\\).\nThe value of \\(𝑃𝑒𝑟𝑠𝑜𝑛𝑃𝑎𝑟𝑡𝑖𝑐𝑙𝑒𝑠\\) in each intersecting area is shown below.\nblckdf &lt;- get_acs(geography = \"block group\", \n                  state=\"DE\",\n                  variables = c(Total=\"B03002_001\"), \n                  survey=\"acs5\",\n                  year=2019,\n                  output=\"wide\") \n\nintblck&lt;-merge(intdf, blckdf, by=\"GEOID\", all.x=TRUE) %&gt;%\n  filter(!is.na(TotalE)) %&gt;%\n  mutate(pp=(area/hysplitgridarea)*part*(area/blckarea)*TotalE)%&gt;%\n  dplyr::select(pp, GEOID, part)\n\nintblck_map&lt;-intblck %&gt;%\n  group_by(GEOID, part) %&gt;%\n  summarise(pp=sum(pp))\n\nint2&lt;-merge(int, intblck_map, by=c(\"GEOID\", \"part\"))\n\n#tm_shape(int2)+tm_fill(\"pp\", breaks=c(0,1,2,3))+tm_layout(legend.outside = TRUE)\n\n\n\n\n\nAfterwards, we can find the total number of people exposed to the pollutant by finding the sum of all \\(𝑃𝑒𝑟𝑠𝑜𝑛𝑃𝑎𝑟𝑡𝑖𝑐𝑙𝑒𝑠_i\\) in all areas \\(𝑖\\).\ntotalpp&lt;-sum(intblck$pp)\n\n\nAdditional Resources\nOnline HYPSLIT User’s Guide\nCONTROL file description in the HYPSLIT User’s Guide\n\n\nReferences\nStein, A., Draxler, R., Rolph, G., Stunder, B., Cohen, M., Ngan, F. (2015). NOAA’s HYSPLIT Atmospheric Transport and Dispersion Modeling System. Bulletin of the American Meteorological Society, 96 (12), 2059-2077. DOI: 10.1175/BAMS-D-14-00110.1"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "I am the Faculty Leader of the FIRE Sustainability Analytics research group at the University of Maryland. I am dedicated to training undergraduate students in empirical microeconomics research.\nI received my Ph.D. in Agricultural and Applied Economics from the University of Wisconsin-Madison in 2018. As a researcher, I am interested in using economics and atmospheric science models to assess the consequences of air pollution regulations.\nEmail: ruangmas [at] umd.edu"
  },
  {
    "objectID": "paper-replication.html",
    "href": "paper-replication.html",
    "title": "Paper Replication Assignments",
    "section": "",
    "text": "The GitHub repositories linked below are assignments that help students learn programming in R, while guiding them to replicate figures and tables in “Defensive Investments and the Demand for Air Quality: Evidence from the NOx Budget Program” by Deschenes et al. (2017) simultaneously.\nThe GitHub repository for each assignment has been set as a template repository.\n\nUnderstanding the Data\nMake Figure 1\nMake Table 1\nMake Appendix Figure 2A\nMake Table 2"
  },
  {
    "objectID": "r-and-github.html",
    "href": "r-and-github.html",
    "title": "Reproducible Research Workflow with Posit Cloud and GitHub",
    "section": "",
    "text": "1. Introduction to Posit Cloud and R Packages\n\n\n\n\n2. How to link Posit Cloud to GitHub & clone an assignment\n\n\n\n\n3. How to update changes in Posit Cloud to the same GitHub repository\n\n\n\n\n4. How to edit R scripts from a GitHub repository in your local computer with Windows OS"
  }
]